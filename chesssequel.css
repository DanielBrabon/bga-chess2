/**
 *------
 * BGA framework: © Gregory Isabelli <gisabelli@boardgamearena.com> & Emmanuel Colin <ecolin@boardgamearena.com>
 * ChessSequel implementation : © <Daniel Brabon> <dev.d8dms@simplelogin.co>
 *
 * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.
 * See http://en.boardgamearena.com/#!doc/Studio for more information.
 * -----
 *
 * chesssequel.css
 *
 * ChessSequel stylesheet
 *
 */

/*
    This is the CSS stylesheet of your game User Interface.
    
    Styles defined on this file will be applied to the HTML elements you define in your
    HTML template (chesssequel_chesssequel.tpl), and to HTML elements you create dynamically
    (in chesssequel.js).
    
    Usually, you are using CSS to:
    
    1°) define the overall layout of your game
        (ex: place the board on the top left, place player's hand beside, place the deck on the right, ...).

    2°) create your CSS-sprites:
        All images of your games should be gathered into a small number of image files. Then, using
        background-image and background-position CSS properties, you create HTML blocks that can 
        display these images correctly (see example below).
    
    3°) ... anything else:
        It is really easy to add and remove CSS classes dynamically from your Javascript with
        dojo.addClass and dojo.removeClass. It is also easy to check if an element has a class
        (dojo.hasClass) or to get all elements with a specific class (dojo.query). This is why,
        very often, using CSS classes for the logic of your user interface allow you to do complex
        thing easily.
        
        
     Note: on the production platform, this file will be compressed and comments will be removed.
           Consequently, don't hesitate to put as many comments as necessary.
*/


/* Note: you must not use any @import directive */


/********* You can start writing your CSS below this line: **********/


/*
    Example of CSS sprites (a black token and a white token, 20x20px each, embedded in the same "tokens.png" 40x20px image):

    .white_token {
        background-image: url('img/tokens.png');
        background-position: 0px 0px;
    }
    .black_token {
        background-image: url('img/tokens.png');
        background-position: -20px 0px;
    }
    .token {
        width: 20px;
        height: 20px;
        background-repeat: none;
    }
*/

:root {
    /* Some colors I might want to use */
    --egg: #6fbfbc;
    --dark-egg: #2d6363;
    --pale-green: #568756cc;
    --slightly-different-pale-green: #5c935c;
    --nettle: #8a864c;
    --light-yellow: #fffaba;
    --lemongrass: #d4d98a;
    --light-gray: #e1e1e1;
    --dark-gray: #a5a5a5;
    --nice-blue: #187695cc;
    --rich-blue: #233a93;

    /* Colors applied */
    --light-square-color: #6fbfbc;
    --dark-square-color: #2d6363;
    --last-move-color: #d4d98a57;
    --poss-move-color: #233a93;
}

#board_wrap {
    /* 80vh seems best for normal use on desktop and mobile. Using 70 for now for better view with dev tools on screen */
    max-width: min(70vh, 480px);
    margin: 0 auto;
    position: relative;
}

#board_wrap::after {
    content: '';
    display: block;
    padding-top: 100%;
}

#board {
    width: 100%;
    height: 100%;
    background-image: url('img/board.jpg');
    background-size: contain;

    /* Alternative way to make the board background */
    /* background: conic-gradient(var(--dark-square-color) 90deg, var(--light-square-color) 0 180deg, var(--dark-square-color) 0 270deg, var(--light-square-color) 0) 0px 0px/25% 25%; */
    position: absolute;
}

.square {
    width: 12.5%;
    height: 12.5%;
    position: absolute;
    /* Allows adding a border to squares without resizing */
    box-sizing: border-box;
}

.piece {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 50%;
    left: 50%;
    translate: -50% -50%;
    background-size: 2000%;
    z-index: 1;
}

.logpiece {
    width: 30px;
    height: 30px;
    background-size: 600px 30px;
    display: inline-block;
    vertical-align: bottom;
}

.piececolor_000000 {
    background-image: url('img/blackpieces.png');
}

.piececolor_ffffff {
    background-image: url('img/whitepieces.png');
}

.piecetype_queen { background-position: -0%; }
.piecetype_king { background-position: -100%; }
.piecetype_rook { background-position: -200%; }
.piecetype_knight { background-position: -300%; }
.piecetype_bishop { background-position: -400%; }
.piecetype_pawn { background-position: -500%; }
.piecetype_nemesis { background-position: -600%; }
.piecetype_nemesispawn { background-position: -700%; }
.piecetype_empoweredknight { background-position: -800%; }
.piecetype_empoweredbishop { background-position: -900%; }
.piecetype_empoweredrook { background-position: -1000%; }
.piecetype_elegantqueen { background-position: -1100%; }
.piecetype_reaper { background-position: -1200%; }
.piecetype_ghost { background-position: -1300%; }
.piecetype_warriorking { background-position: -1400%; }
.piecetype_wildhorse { background-position: -1500%; }
.piecetype_tiger { background-position: -1600%; }
.piecetype_elephant { background-position: -1700%; }
.piecetype_junglequeen { background-position: -1800%; }

.piecetype_empty {
    background-position: -1900%;
    animation: Pulsate 2s linear infinite;
}

@keyframes Pulsate {
    from { opacity: 0.75; }
    50% { opacity: 0.25; }
    to { opacity: 0.75; }
}

.coords {
    position: absolute;
    display: flex;
    pointer-events: none;
    user-select: none;
    font-size: 11px;
    font-weight: bold;
}

#ranks {
    top: 1px;
    right: 0;
    height: 100%;
    width: 0.8em;
    flex-direction: column-reverse;
}

#files {
    bottom: 6px;
    left: 3px;
    height: 0.8em;
    width: 100%;
    flex-direction: row;
}

.coord {
    flex-grow: 1;
}

.coordtype_0 {
    color: var(--light-square-color);
}

.coordtype_1 {
    color: var(--dark-square-color);
}

.flipped {
    transform: rotate(180deg);
}

.possible_move {
    /* Dot */
    background: radial-gradient(var(--poss-move-color) 17%, transparent 18%);
    cursor: pointer;
}

/* Possible move to an occupied square */
.possible_move_oc {
    /* Circle */
    /* background: radial-gradient(transparent 50%, var(--poss-move-color) 51% 60%, transparent 61%); */

    /* Starburst */
    /* background: repeating-conic-gradient(transparent 0 15deg, var(--poss-move-color) 15deg 30deg);  */

    /* Fade */
    background: radial-gradient(var(--poss-move-color) 20%, transparent 100%);
    cursor: pointer;
}

.selected_piece {
    /* Starburst */
    /* background: repeating-conic-gradient(transparent 0 15deg, var(--poss-move-color) 15deg 30deg); */

    /* Round inner corners */
    /* background: radial-gradient(transparent 95%, var(--poss-move-color) 0); */

    /* Round outer corners */
    /* border-radius: 7px; */

    /* Border */
    border: var(--poss-move-color) solid;
}

.cap_piece {
    top: 75%;
    left: 75%;
}

.def_piece {
    top: 25%;
    left: 25%;
}

.check {
    background-color: darkred;
    opacity: 0.8;
    filter: alpha(opacity=20);
    /* For IE8 and earlier */
    cursor: pointer;
}

.threat {
    background-color: darkorange;
    opacity: 0.8;
    filter: alpha(opacity=20);
    /* For IE8 and earlier */
    cursor: pointer;
}

.last_move {
    background-color: var(--last-move-color);
}